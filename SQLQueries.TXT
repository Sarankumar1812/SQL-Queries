CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    address VARCHAR(255)
);
DESCRIBE customers;

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

DESCRIBE orders;

CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    price DECIMAL(10, 2),
    description TEXT
);

DESCRIBE products;

INSERT INTO customers (name, email, address)
VALUES
    ('Sharan', 'sharan@example.com', '123 Main St TV Malai'),
    ('Yoga', 'yoga@example.com', '456 Oak Ave Bangalore'),
    ('Don', 'don@example.com', '789 Pine Dr Vellore');

SELECT * FROM customers;

INSERT INTO products (name, price, description)
VALUES
    ('Vivo V47', 35499.00, 'RAM: 8GB, ROM: 128GB '),
    ('One Plus 12T Pro', 69999.00, 'RAM: 12GB, ROM: 256GB'),
    ('IQOO Z9s Pro', 26599.00, 'RAM: 12GB, ROM: 128GB');

SELECT * FROM products;

INSERT INTO orders (customer_id, order_date, total_amount)
VALUES
    (1, '2024-10-01', 132097.00),
    (2, '2024-09-25', 198145.00),
    (3, '2024-10-10', 264194.00);

SELECT * FROM orders;

/* 1. Retrieve all customers who have placed an order in the last 30 days. */

SELECT customers.name, customers.email
FROM customers
JOIN orders ON customers.id = orders.customer_id
WHERE order_date >= CURDATE() - INTERVAL 30 DAY;

/* 2. Get the total amount of all orders placed by each customer. */

SELECT customers.name, SUM(orders.total_amount) AS total_spent
FROM customers
JOIN orders ON customers.id = orders.customer_id
GROUP BY customers.id;

/* 3. Update the price of IQOO Z9s Pro to 21000.00. */ 

UPDATE products
SET price = 21000.00
WHERE name = 'IQOO Z9s Pro';

SELECT * FROM products;

/*  4. Add a new column discount to the products table. */

ALTER TABLE products
ADD discount DECIMAL(5, 2);

/* 5. Retrieve the top 3 products with the highest price. */

SELECT name, price
FROM products
ORDER BY price DESC
LIMIT 3;

/* 6. Get the names of customers who ordered Vivo V47. */

SELECT customers.name
FROM customers
JOIN orders ON customers.id = orders.customer_id
JOIN order_items ON orders.id = order_items.order_id
JOIN products ON order_items.product_id = products.id
WHERE products.name = 'Vivo V47';

/* 7. Join the orders and customers tables to retrieve the customer's name and order date for each order. */

SELECT customers.name, orders.order_date
FROM customers
JOIN orders ON customers.id = orders.customer_id;

/*  Retrieve the orders with a total amount greater than 150000.00. */

SELECT *
FROM orders
WHERE total_amount > 150000.00;

/* 9. Normalize the database by creating a separate table for order items and updating the orders table to reference the order_items table. */

CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

ALTER TABLE orders
DROP COLUMN total_amount;

INSERT INTO order_items (order_id, product_id, quantity)
VALUES
    (1, 1, 2), 
    (1, 2, 1), 
    (2, 3, 3), 
    (3, 1, 5); 

/* 10. Retrieve the average total of all orders. */

SELECT AVG(total_amount) AS average_order_total
FROM (
    SELECT SUM(order_items.quantity * products.price) AS total_amount
    FROM order_items
    JOIN products ON order_items.product_id = products.id
    GROUP BY order_items.order_id
) AS order_totals;





